parameters:
	level: max
	paths:
		- Src/
		- bootstrap.php
		- Tests/DirectoryScannerTest.php # To cover "DirectoryScanner" aware traits.
	excludePaths:
		- vendor/
		- Src/Traits/ContainerAware.php
	ignoreErrors:
		- # Only invoked if subDirectory provided in config file.
				path: bootstrap.php
				identifier: method.notFound
				message: '#^Call to an undefined method .*?CommandLoader::usingSubDirectory\(\).$#'
		-
			path: bootstrap.php
			messages:
				- '#^Offset ''commandLoader'' on array\{.*?\} on left side of \?\?\= always exists and is not nullable\.$#'
		- # Container binding as an array: [$commandClassname, 'start']
			path: Src/CommandLoader.php
			identifier: argument.type
			count: 1
			message: '#^Parameter \#2 \$command of method .*?CommandLoader::useFoundCommand\(\) expects callable.*?, array{class-string\<.*?Console\>, ''start''} given.$#'
		-
			path: Src/Traits/DirectoryScanner.php
			identifier: method.notFound
			message: '#^Call to an undefined method .*?::registerCurrentItemDepth\(\).$#'
		-
			path: Src/Traits/DirectoryScanner.php
			identifier: argument.type
			messages:
				- '#^Parameter \#1 \$value of function count expects array\|Countable\, mixed given.$#'
				- '#^Parameter \$parts of method .*?::maybeRegisterCurrentDepth\(\) expects array\<string\>\, mixed given.$#'
		- # Available when respective traits are used by exhibiting class.
			path: Src/Traits/DirectoryScanner.php
			identifier: method.notFound
			message: '#^Call to an undefined method .*?::(currentSubDirectoryTree\(\)|forCurrentSubDirectory\(\)).$#'
		-
			# Parser::parseInputSuggestion() -> BackedEnum is never callable.
			# Parser::suggestedValuesFrom()  -> ReflectionProperty::getValue() return type is mixed and not narrowed.
			path: Src/Helper/Parser.php
			identifier: return.type
			message: '#^Method .*?Parser::.*?\(\) should return .*? but returns .*?.$#'
		- # Walked collection is converted to Symfony Inputs.
			path: Src/Helper/InputAttribute.php
			identifier: return.type
			count: 1
			message: '#^Method .*?InputAttribute::toSymfonyInput\(\) should return array\<.*?, array\<string, Symfony.*?\>\> but returns array\<.*?, array\<string, TheWebSolver.*?\>\>.$#'
		- # Internal data for setting value (that's the intent).
			path: Src/Traits/ConstructorAware.php
			identifier: argument.type
			count: 3
			message: '#^Parameter \#1 \$name of class .*?(Positional|Associative|Flag) constructor expects string, mixed given.$#'
		- # Assigned in constructor of `InputProperties` trait.
			path: Src/Data/Associative.php
			identifier: property.readOnlyAssignNotInConstructor
			count: 7
			message: '#^Readonly property .*?Associative::\$.*? is assigned outside of the constructor.$#'
		- # `ConstructorAware` trait generics always matches Flag::__construct() method's parameter names.
			path: Src/Data/Flag.php
			identifier: assign.propertyType
			count: 1
			message: '#^Property .*?Flag::\$paramNames \(array\<.*?\>\) does not accept array\<string\>.$#'
		- # Callable is always an array: [$commandClassname, 'start'].
			path: Src/Adapter/CompilableCommandLoader.php
			identifier: argument.type
			count: 1
			message: '#^Parameter \#2 \$value of method .*?ArrayPhpFile::addImportableContent\(\) expects array\{string, string}\|Closure\|string, callable.*? given.$#'
